/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina CDC'

def packageName = "cdc"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml --includes=io.ballerina.lib.cdc.*:ballerinax.cdc.*"
}

dependencies {

    externalJars(group: 'io.debezium', name: 'debezium-embedded', version: debeziumVersion) {
        transitive false
    }
    externalJars(group: 'io.debezium', name: 'debezium-core', version: debeziumVersion) {
        // Packed separately
        exclude group: 'io.debezium', module: 'debezium-api'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jsr310'
    }
    externalJars(group: 'io.debezium', name: 'debezium-api', version: debeziumVersion) {
        transitive false
    }

    externalJars(group: 'io.debezium', name: 'debezium-storage-file', version: debeziumVersion) {
        transitive false
    }
    externalJars(group: 'io.debezium', name: 'debezium-storage-kafka', version: debeziumVersion) {
        transitive false
    }

    externalJars(group: 'org.apache.kafka', name: 'connect-runtime', version: kafkaVersion) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
        exclude group: 'org.bitbucket.b_c', module: 'jose4j'
        exclude group: 'com.fasterxml.jackson.jaxrs', module: 'jackson-jaxrs-json-provider'
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet'
        exclude group: 'org.glassfish.jersey.inject', module: 'jersey-hk2'
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'javax.activation', module: 'activation'
        exclude group: 'org.eclipse.jetty', module: 'jetty-server'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlets'
        exclude group: 'org.eclipse.jetty', module: 'jetty-client' // Duplicate removed
        exclude group: 'org.reflections', module: 'reflections'
        exclude group: 'org.apache.maven', module: 'maven-artifact'
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'

        // Packed separately
        exclude group: 'org.apache.kafka', module: 'connect-api'
        exclude group: 'org.apache.kafka', module: 'connect-json'
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }

    externalJars(group: 'org.apache.kafka', name: 'connect-api', version: kafkaVersion) {
        transitive false
    }
    externalJars(group: 'org.apache.kafka', name: 'connect-json', version: kafkaVersion) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.apache.kafka', module: 'connect-api'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
    }
    externalJars(group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion) {
        transitive false
    }
}

tasks.register('updateTomlFiles') {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace("@debezium.version@", debeziumVersion)
        newBallerinaToml = newBallerinaToml.replace("@kafka.version@", kafkaVersion)
        newBallerinaToml = newBallerinaToml.replace("@fasterxml.version@", fasterxmlVersion)
        ballerinaTomlFile.text = newBallerinaToml

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

tasks.register('commitTomlFiles') {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

tasks.register('startMySQLServer') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker ps --filter name=mysql-cdc"]
            standardOutput = stdOut
        }
        if (!stdOut.toString().contains("mysql-cdc")) {
            println "Starting MySQL server."
            exec {
                commandLine cmd + ["docker compose -f tests/environment/compose.yaml up -d"]
                standardOutput = stdOut
            }
            println stdOut.toString()
            sleep(20 * 1000)
        } else {
            println "MySQL server is already running."
        }
    }
}

tasks.register('stopMySQLServer') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker ps --filter name=mysql-cdc"]
            standardOutput = stdOut
        }
        if (stdOut.toString().contains("mysql-cdc")) {
            println "Stopping MySQL server."
            exec {
                commandLine cmd + ["docker compose -f tests/environment/compose.yaml rm -svf"]
                standardOutput = stdOut
            }
            println stdOut.toString()
            sleep(5 * 1000)
        } else {
            println "MySQL server is not started."
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs
build.dependsOn "generatePomFileForMavenPublication"

test.dependsOn "startMySQLServer"
test.finalizedBy "stopMySQLServer"

build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
build.finalizedBy ":${packageName}-compiler-plugin-tests:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-compiler-plugin:build"
test.finalizedBy ":${packageName}-compiler-plugin-tests:test"
publishToMavenLocal.dependsOn build
publish.dependsOn build
